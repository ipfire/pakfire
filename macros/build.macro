

def MACRO_EXTRACT_TARBALL
	for source in %{sources}; do
		%{MACRO_EXTRACT} %{DIR_DL}/${source} || exit 1
	done
	unset source

	[ -d "%{DIR_APP}" ] && cd %{DIR_APP}
end

def MACRO_INSTALL_FILES
	%{MACRO_INSTALL_DEFAULT_FILES}
	%{MACRO_INSTALL_SYSTEMD_FILES}
	%{MACRO_INSTALL_SYSTEMD_TMPFILES}
	%{MACRO_INSTALL_PAM_FILES}
	%{MACRO_INSTALL_LOGROTATE_FILES}
end

# XXX to be removed soon
def MACRO_INSTALL_DEFAULT_FILES
	for file in %{DIR_SOURCE}/default/*; do
		[ -e "${file}" ] || continue
		mkdir -p %{BUILDROOT}/etc/default
		cp -vf ${file} %{BUILDROOT}/etc/default/$(basename ${file})
	done
	unset file
end

def MACRO_INSTALL_PAM_FILES
	for file in %{DIR_SOURCE}/{*.pam,pam.d/*}; do
		[ -e "${file}" ] || continue
		mkdir -p %{BUILDROOT}/etc/pam.d
		cp -vf ${file} %{BUILDROOT}/etc/pam.d/$(basename ${file%*.pam})
	done
	unset file
end

def MACRO_INSTALL_LOGROTATE_FILES
	for file in %{DIR_SOURCE}/{*.logrotate,logrotate/*}; do
		[ -e "${file}" ] || continue
		mkdir -p %{BUILDROOT}/etc/logrotate.d
		cp -vf ${file} %{BUILDROOT}/etc/logrotate.d/$(basename ${file%*.logrotate})
	done
	unset file
end

def MACRO_PYTHON_COMPILE
	if [ -x "%{python3}" ]; then
		%{python3_bytecompile} \
			%{BUILDROOT}%{python3_sitearch} \
			%{BUILDROOT}%{python3_sitelib}
	fi

	if [ -x "%{python}" ]; then
		%{python_bytecompile} \
			%{BUILDROOT}%{python_sitearch} \
			%{BUILDROOT}%{python_sitelib}
	fi
end

def MACRO_FIX_AUTOTOOLS
	if [ "%{DISTRO_ARCH}" = "aarch64" ]; then
		for i in $(find %{DIR_SRC} -name config.guess -or -name config.sub); do
			if ! grep -q "aarch64" ${i}; then
				if [ -e "%{datadir}/pakfire/$(basename ${i})" ]; then
					cp -vf %{datadir}/pakfire/$(basename ${i}) $(dirname ${i})
				fi
			fi
		done
	fi
end

MACRO_PATCHES = /usr/lib/pakfire/patch --search-path=%{DIR_PATCHES} "%{patches}"

# Pre-defined build scripts.
build
	# These variables are used if you have to add some targets
	# directly to the make command.
	make_build_targets   =
	make_install_targets = install

	def _prepare
		rm -rf %{BUILDROOT}/*
		mkdir -p %{DIR_SRC} && cd %{DIR_SRC}

		%{prepare}
	end

	def prepare
		# Extract source tarball.
		%{MACRO_EXTRACT_TARBALL}

		# Apply all patches.
		%{MACRO_PATCHES}

		# Run custom commands.
		%{prepare_cmds}

		# Fix outdated autotools on aarch64
		%{MACRO_FIX_AUTOTOOLS}
	end

	def prepare_cmds
	end

	def _build
		[ -d "%{DIR_APP}" ] && cd %{DIR_APP}

		%{build}
	end

	def build
		if [ -e "%{CONFIGURE_SCRIPT}" ]; then
			./%{CONFIGURE_SCRIPT} \
				%{configure_options}

			%{MACRO_FIX_LIBTOOL}
		fi

		# Run custom commands.
		%{configure_cmds}

		make %{PARALLELISMFLAGS} %{make_build_targets}

		# Run more custom commands.
		%{build_cmds}
	end

	def configure_cmds
	end

	def build_cmds
	end

	def _test
		[ -d "%{DIR_APP}" ] && cd %{DIR_APP}

		%{test}
	end

	def test
	end

	def _install
		[ -d "%{DIR_APP}" ] && cd %{DIR_APP}

		mkdir -pv %{BUILDROOT}

		%{install}

		%{MACRO_INSTALL_FILES}
		%{MACRO_PYTHON_COMPILE}

		# Cleanup perl modules.
		%{perl_cleanup}

		%{install_post}

		%{MACRO_QUALITY_AGENT}
	end

	def install
		make DESTDIR=%{BUILDROOT} %{make_install_targets}

		# Run custom commands.
		%{install_cmds}
	end

	# XXX to be removed soon
	def install_post
	end

	# Enable strict processing of build-id by default.
	# The build will fail if a file is missing its build-id.
	debuginfo_strict_build_id = true
	debuginfo_options =
end
